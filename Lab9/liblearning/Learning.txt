1、静态库动态库介绍

静态库是指在我们的应用中，有一些公共代码是需要反复使用，就把这些代码编译为“库”文件；在链接步骤中，连接器将从库文件取得所需的代码，复制到生成的可执行文件中的这种库。
程序编译一般需经预处理、编译、汇编和链接几个步骤。静态库特点是可执行文件中包含了库代码的一份完整拷贝；缺点就是被多次使用就会有多份冗余拷贝。
静态库和动态库是两种共享程序代码的方式，它们的区别是：静态库在程序的链接阶段被复制到了程序中，和程序运行的时候没有关系；动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用。使用动态库的优点是系统只需载入一次动态库，不同的程序可以得到内存中相同的动态库的副本，因此节省了很多内存。
静态库在文件中静态展开，所以有多少文件就展开多少次，非常吃内存，100M展开100次，就是1G，但是这样的好处就是静态加载的速度快
使用动态库会将动态库加载到内存，10个文件也只需要加载一次，然后这些文件用到库的时候临时去加载，速度慢一些，但是很省内存
动态库和静态库各有优劣，根据实际情况合理选用即可。

2、静态库的使用
制作静态库：ar rcs libMyMath.a add.o sub.o div1.o
使用静态库：gcc test.c libMyMath.a -o test

出现的警告，用编译器隐式声明来解决的
编译器只能隐式声明返回值为int的函数形式：int add(int ,int )；
如果函数不是返回的int，则隐式声明失效，会报错。

新建resource、inc、lib目录。 mkdir resource
将*.c（test.c除外。图片有误）、*.o放到resource目录下；将*.h（头文件）放到inc；将*.a（静态库）放到lib目录下
mv *.c ./resource/      把.c文件都移动到resource中
重新编译
gcc test.c ./lib/libMyMath.a -o test -I ./inc/
